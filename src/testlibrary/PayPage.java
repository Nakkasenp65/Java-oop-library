/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package testlibrary;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author nakka
 */
public class PayPage extends javax.swing.JFrame {
    //DATABASE
    Connection con;
    PreparedStatement pst;
    ResultSet rs;

    //OBJECT
    Ebook eb;
    User user;
    Rent r;

    //DATE
    Date dateRentalDate;
    LocalDate localRentalDate;
    Date dateDueDate;
    LocalDate localDueDate;
    String strRentalDate;
    String strDueDate;

    //VARIABLE
    String totalPrice;
    double price;

    public PayPage() {
        initComponents();
    }

    public PayPage(User user, Ebook eb) {
        initComponents();
        con = DB_Connection.dbConnection();
        this.user = user;
        this.eb = eb;
        txtSelectedBook.setText(eb.getBookDetails());
    }

    public String getDateDetails(String rentalDate, String dueDate) {
        String dateDetails = "";
        dateDetails += "Rental date: " + rentalDate + "\n";
        dateDetails += "Due date: " + dueDate + "\n";
        dateDetails += "Rent duration: " + getRentalDuration(localRentalDate, localDueDate) + "\n";

        return dateDetails;
    }

    public int getRentalDuration(LocalDate rentalDate, LocalDate dueDate) {
        int duration = (int) ChronoUnit.DAYS.between(rentalDate, dueDate);
        if (duration <= 0) {
            return 0;
        } else {
            return duration;
        }
    }

    public LocalDate convertToLocalDateViaInstant(Date dateToConvert) {
        return dateToConvert.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
    }

    public double calculatePrice(String genre) {

        double price;
        int duration = (int) calculateRentalDurationInDays();

        if (genre.equalsIgnoreCase("Journal")) {
            price = 5;
        } else {
            price = 10;
        }

        return price * duration;
    }

    public long calculateRentalDurationInDays() {
        return ChronoUnit.DAYS.between(localRentalDate, localDueDate);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtPriceReceipt = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtSelectedBook = new javax.swing.JTextArea();
        btnPrice = new javax.swing.JButton();
        chkReceipt = new javax.swing.JCheckBox();
        dueDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        rentalDatePicker = new org.jdesktop.swingx.JXDatePicker();
        btnConfirm = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel4.setText("Selected book:");

        txtPriceReceipt.setColumns(20);
        txtPriceReceipt.setRows(5);
        jScrollPane2.setViewportView(txtPriceReceipt);

        jLabel1.setText("Total price:");

        txtSelectedBook.setColumns(20);
        txtSelectedBook.setRows(5);
        jScrollPane3.setViewportView(txtSelectedBook);

        btnPrice.setText("Check Rent Price");
        btnPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPriceActionPerformed(evt);
            }
        });

        chkReceipt.setSelected(true);
        chkReceipt.setText("Get receipt");
        chkReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkReceiptActionPerformed(evt);
            }
        });

        dueDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dueDatePickerActionPerformed(evt);
            }
        });

        jLabel3.setText("Rental Date");

        jLabel5.setText("Due Date");

        rentalDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentalDatePickerActionPerformed(evt);
            }
        });

        btnConfirm.setText("Confirm Rent");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rentalDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dueDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(btnConfirm)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnCancel))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(375, Short.MAX_VALUE)
                .addComponent(chkReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dueDatePicker, rentalDatePicker});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rentalDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(dueDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrice)
                    .addComponent(chkReceipt))
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirm)
                    .addComponent(btnCancel))
                .addGap(32, 32, 32))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void chkReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkReceiptActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkReceiptActionPerformed

    private void btnPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPriceActionPerformed
        price = calculatePrice(eb.getGenre());
        //CREATE OBJECT HERE with PRICE BUTTON;
        /*
        User created with form constructor
        Ebook created with form constructor
        Rent created
         */
        r = new Rent(user, eb, localRentalDate, localDueDate, price);
        txtPriceReceipt.setText(r.getRentDetails());
    }//GEN-LAST:event_btnPriceActionPerformed

    private void rentalDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentalDatePickerActionPerformed
        if (rentalDatePicker.getDate() == null) {
        } else {
            dateRentalDate = rentalDatePicker.getDate();
            localRentalDate = convertToLocalDateViaInstant(dateRentalDate);
            strRentalDate = localRentalDate + ""; //THIS IS ASSIGN FOR DB
        }
    }//GEN-LAST:event_rentalDatePickerActionPerformed

    private void dueDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dueDatePickerActionPerformed
        if (dueDatePicker.getDate() == null) {
        } else {
            dateDueDate = dueDatePicker.getDate();
            localDueDate = convertToLocalDateViaInstant(dateDueDate);
            strDueDate = localDueDate + ""; //THIS IS ASSIGN FOR DB
        }
    }//GEN-LAST:event_dueDatePickerActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        boolean needReciept = chkReceipt.isSelected();
        String genPassword = r.getGenPassword();
        uploadRentToDB(r,user,eb,strRentalDate,strDueDate,price,genPassword);
        if (txtPriceReceipt.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please check price and Date");
        } else {
            if (needReciept) {
                PrintReceiptPage rp = new PrintReceiptPage(r, user);
                rp.setVisible(true);
                dispose();
            } else {
                MyBookPage mbp = new MyBookPage(user);
                mbp.setVisible(true);
                dispose();
            }
        }
        

        /*
        TABLE: rentID|userID|bookID|rentalDate|dueDate|price|genPassword|isActive	
         */

    }//GEN-LAST:event_btnConfirmActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        UsernameBrowsePage ubp = new UsernameBrowsePage(user);
        ubp.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    public void uploadRentToDB(Rent rent, User user, Ebook eb, String rentalDate, String dueDate, double price, String genPassword) {
        int userID= user.getUserID();
        int bookID = eb.getBookID();
        boolean isActive = rent.getIsActive(); 
        
        try {
                // TODO add your handling code here:
                
                pst = con.prepareStatement("INSERT INTO rent (userID,bookID,rentalDate,dueDate,price,genPassword,isActive) VALUES (?,?,?,?,?,?,?)");
                pst.setInt(1, userID);
                pst.setInt(2, bookID);
                pst.setString(3, rentalDate);
                pst.setString(4, dueDate);
                pst.setDouble(5, price);
                pst.setString(6, genPassword);
                pst.setBoolean(7, isActive);

                int k = pst.executeUpdate();

                if (k == 1) {
                    JOptionPane.showMessageDialog(this, "Rent Success!");
                } else {
                    JOptionPane.showMessageDialog(this, "Rent failed, please try again!!!");
                }

            } catch (SQLException ex) {
                Logger.getLogger(UserRegisterPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PayPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnPrice;
    private javax.swing.JCheckBox chkReceipt;
    private org.jdesktop.swingx.JXDatePicker dueDatePicker;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private org.jdesktop.swingx.JXDatePicker rentalDatePicker;
    private javax.swing.JTextArea txtPriceReceipt;
    private javax.swing.JTextArea txtSelectedBook;
    // End of variables declaration//GEN-END:variables
}
